/* Functions needed to patch the gdbm library */

/* FUNCTIONS TO PATCH THE LIBRARY */

/* PATCHED VERSION OF GDBM LIBRARY *******************************************
 * This patch is intended to copy the functionality of the 
 * GDBM library as it is found on the SGI platform.
 * The original version of the library created different 
 * fileformats at different platforms. This patched version
 * intends to create the same file at each different platform.
 * The current patched version has been tested for OS X, IRIX,
 * and LINUX. As the original files were all created under
 * IRIX, this patch conforms to the files created at that
 * platform.
 *
 * patch includes:
 * 1) definition of off_t as my_int64_t to be sure that this
 *    field is 8 bytes across platforms. off_t is 4 bytes
 *    on linux and 8 bytes on sgi and osx.
 * 2) includes byteswapping to store the files in the SGI
 *    native format to ensure cross platform compatibility.
 * 3) saving data structures field by field to ensure that
 *    no zero padding is added in between members of these
 *    structures.
 * 4) to add empty dummy fields at those places where the original
 *    SGI version of this library did put additional zeros to have
 *    64 bit integers align properly in memory.
 *
 * notes:
 * the definition of my_int64_t in autoconf.h may need some adjustments
 * in the future to be compatible with more compilers.
 *
 * All lines that have been patched are marked with a PATCH marker
 * the only exception is the conversion of off_t to my_int64_t
 *
 * patch generated by : JG Stinstra
 *
 ****************************************************************************/
 
#ifndef GDBMPATCH_H
#define GDBMPATCH_H 1

#ifndef _WIN32
#include <unistd.h>
#endif
#include "gdbmdefs.h"


int patch_isbyteswap();
void patch_swapbytes(void *vbuffer,int elsize,int size);

int patch_bsread(int desc,void *data,int elsize,int numel,int byteswap);
int patch_bswrite(int desc,void *data,int elsize,int numel,int byteswap);

int patch_readheader(int desc,void *data,int nbytes);
int patch_readavailblock(int desc,void *data,int nbytes);
int patch_readavailtable(int desc,void *data,int nbytes);
int patch_readhashbucket(int desc,void *data,int nbytes);
int patch_readdir(int desc,void *data,int nbytes);
int patch_readavailtable(int desc,void *data,int nbytes);

int patch_writeheader(int desc,void *data,int nbytes);
int patch_writeavailblock(int desc,void *data,int nbytes);
int patch_writehashbucket(int desc,void *data,int nbytes);
int patch_writedir(int desc,void *data,int nbytes);

#endif
